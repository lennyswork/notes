如果使用rails框架只开发管理后台,就是对店铺和课程的增删改查　是不是不太困难　，是否我现在就可以做呢？
就是我可以直接在测试的接口里直接这么使用
虽然还没有页面，但是可以这么直接使用　只要知道课程的结构
其实完全可以用rails自动生成这些代码

想想应该是这个样子，可以使用rails生成所谓的管理后台　而在java中继续使用现在的方式
因为其实你在java中很难使用到那个对课程信息的修改之类的，你其实只能查看课程的信息

还有记得课程的删除那个只是对其逻辑删除，而不是物理删除

课程与登陆账号之间的关系
登陆了系统之后就只能看到属于自己的店铺，还有店铺下新增的课程，你只能去查询属于自己的课程就是本身登陆之后就会有限制

那么还需要一个商家的登陆系统

那么问题来了，商家的登陆系统账号呢，商家的系统

可能一个用户拥有几个健身房　所以需要新建健身房时候获取到用户id，将健身房与用户id一起绑定

之后俱乐部账号，每个俱乐部有权利发活动，是否只有认证过的俱乐部才能发活动？

账号体系问题？
之前是会员与教练
现在已经没有所谓的教练了，教练已经抽象成为俱乐部了
那么教练端所谓的登陆与注册是怎么回事呢？
登陆的问题？原来有的话，是不是有的话直接帮其注册教练端，还是同样的登陆，但是要获取之前的其所注册的信息

账号系统的设置登陆教练端才能发布活动与课程？

晒场
我要找对手
俱乐部活动
俱乐部课程

结构设计


邀请码系统设计,每个用户有一个邀请人，有则填，无则没有，唯一性设计,可以使用纯数字码设计或者数字与字母混合设计，也许就是把一个码转换为36位数字

其实用户系统的权限控制也可以使用redis缓存或者就是session会话中,一开始请求就把能够访问的接口放置在其中，

所谓的权限管理，不同用户进入的界面应该是不一样的，这一点究竟如何做到呢？

也是登陆的时候创建对应的session,然后将必要的信息在这时候放入session中

可以用这个判断用户是否已经登陆
User.find(session[:user_id])

module SessionsHelper

  # Logs in the given user.
  def log_in(user)
    session[:user_id] = user.id
  end

  # Returns the current logged-in user (if any).
  def current_user
    @current_user ||= User.find_by(id: session[:user_id])
  end

  # Returns true if the user is logged in, false otherwise.
  def logged_in?
    !current_user.nil?
  end

  # Logs out the current user.
  def log_out
    session.delete(:user_id)
    @current_user = nil
  end
end

class SessionsController < ApplicationController

  def new
  end

  def create
    user = User.find_by(email: params[:session][:email].downcase)
    if user && user.authenticate(params[:session][:password])
      log_in user
      redirect_to user
    else
      flash.now[:danger] = 'Invalid email/password combination'
      render 'new'
    end
  end

  def destroy
    log_out
    redirect_to root_url
  end
end

之前公司使用的就是这种，每一次都要进行这个登陆的验证，从session中获取用户的信息

设计上，是不是管理员可以看到所有用户的信息，其实还可以管理其它用户，比如删除用户之类的，还有看到所有发布的活动与课程，那么网页这边其实也需要接入对应的地图的SDK


当初聊天是因为引入的第三方的聊天系统


